import { useState, useCallback, useRef, useEffect } from "react"
import {
  GoogleMap,
  useJsApiLoader,
  Marker,
  InfoWindow,
} from "@react-google-maps/api"
import { FirebaseAuthConsumer } from "@react-firebase/auth"
import { formatRelative } from "date-fns"
import mapStyles from "./styles/mapStyles"

import AuthForm from "./components/AuthForm"
import Search from "./components/Search"
import LocateBtn from "./components/LocateBtn"

import extractLatLng from "./utils/extractLatLng"

import indexStyle from "./styles/index.module.css"
import CampsiteInfoForm from "./components/CampsiteInfoForm"
import Legend from "./components/Legend"

// Map options
const libraries = ["places"]
const mapContainerStyle = {
  width: "100vw",
  height: "100vh",
}
const center = {
  lat: 37.0902,
  lng: -95.7129,
}
// enable mouse change for create mode
const options = (createMode) => {
  return {
    styles: mapStyles,
    disableDefaultUI: true,
    zoomControl: true,
    draggableCursor: createMode ? "pointer" : "default",
  }
}

function App() {
  const [createMarkerMode, setCreateMarkerMode] = useState(false)
  const [markers, setMarkers] = useState([])
  const [selected, setSelected] = useState(null)
  const [selectedPark, setSelectedPark] = useState(null)
  const [eventMarker, setEventMarker] = useState(null)
  const [toggleCreateCampsiteInfo, setToggleCreateCampsiteInfo] = useState(
    false
  )
  const [parks, setParks] = useState([])

  useEffect(() => {
    fetch(
      `https://developer.nps.gov/api/v1/campgrounds?&api_key=${process.env.REACT_APP_NPS_API_KEY}&limit=700`
    )
      .then((res) => res.json())
      .then((data) => {
        setParks(
          data.data.map((park) => {
            return {
              id: park.id,
              latLng: park.latLong,
              name: park.name,
              images: park.images,
              url: park.url,
              description: park.description,
            }
          })
        )
      })
  }, [])

  const { isLoaded, loadError } = useJsApiLoader({
    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,
    libraries,
  })

  const onMapClick = useCallback(
    (e) => {
      if (createMarkerMode) {
        setToggleCreateCampsiteInfo(true)
        setEventMarker(e)
      }
    },
    [createMarkerMode]
  )

  const mapRef = useRef()
  const onMapLoad = useCallback((map) => {
    mapRef.current = map
  }, [])

  const panTo = useCallback(({ lat, lng }) => {
    mapRef.current.panTo({ lat, lng })
    mapRef.current.setZoom(14)
  }, [])

  if (loadError) return "Error loading maps"
  if (!isLoaded) return "Loading maps..."

  return (
    <FirebaseAuthConsumer>
      {({ isSignedIn, user }) => {
        return (
          <div>
            {!isSignedIn ? <AuthForm /> : null}

            <Legend
              isSignedIn={isSignedIn}
              setCreateMarkerMode={setCreateMarkerMode}
              createMarkerMode={createMarkerMode}
            />

            {/**Form for users to document their camp experiences */}
            {toggleCreateCampsiteInfo ? (
              <CampsiteInfoForm
                setToggleCreateCampsiteInfo={setToggleCreateCampsiteInfo}
                setMarkers={setMarkers}
                eventMarker={eventMarker}
                user={user}
              />
            ) : null}

            {/**Utility Features: Search for a location and pan to current location */}
            <div className={indexStyle.searchContainer}>
              <button onClick={() => setMarkers([])}>Clear</button>
              <Search panTo={panTo} isSignedIn={isSignedIn} />
            </div>

            <LocateBtn panTo={panTo} />

            <GoogleMap
              mapContainerStyle={mapContainerStyle}
              zoom={5}
              center={center}
              options={options(createMarkerMode)}
              onClick={onMapClick}
              onLoad={onMapLoad}
            >
              {/**User created markers  */}
              {markers.map((marker) => (
                <Marker
                  key={marker.time.toISOString()}
                  position={{
                    lat: marker.lat,
                    lng: marker.lng,
                  }}
                  icon={{
                    url: "https://pngimg.com/uploads/tent/tent_PNG47.png",
                    scaledSize: new window.google.maps.Size(30, 30),
                    origin: new window.google.maps.Point(0, 0),
                    anchor: new window.google.maps.Point(15, 15),
                  }}
                  onClick={() => {
                    if (isSignedIn) {
                      setSelected(marker)
                    }
                  }}
                />
              ))}
              {/**Markers generated by National Parks Services API */}
              {parks
                ? parks.map((park) => {
                    const lat = extractLatLng(park.latLng, "lat")
                    const lng = extractLatLng(park.latLng, "lng")
                    return (
                      <Marker
                        key={park.id}
                        position={{
                          lat,
                          lng,
                        }}
                        icon={{
                          url:
                            "https://www.iconpacks.net/icons/2/free-tree-icon-1578-thumb.png",
                          scaledSize: new window.google.maps.Size(15, 15),
                          origin: new window.google.maps.Point(0, 0),
                          anchor: new window.google.maps.Point(15, 15),
                        }}
                        onClick={() => {
                          if (isSignedIn) {
                            setSelectedPark(park)
                          }
                        }}
                      />
                    )
                  })
                : null}
              {/**Info Window for the NPS API Campgrounds */}
              {selectedPark ? (
                <InfoWindow
                  position={{
                    lat: extractLatLng(selectedPark.latLng, "lat"),
                    lng: extractLatLng(selectedPark.latLng, "lng"),
                  }}
                  onCloseClick={() => setSelectedPark(null)}
                >
                  <div>
                    <h3>{selectedPark.name}</h3>
                    <p>
                      {selectedPark.description}{" "}
                      <a href={selectedPark.url} target="_blank">
                        Book It!
                      </a>
                    </p>
                    <div className={indexStyle.parkImgContainer}>
                      {selectedPark.images.map((img, i) => {
                        return (
                          <img
                            key={i}
                            src={img.url}
                            alt={img.altText}
                            className={indexStyle.parkImg}
                          />
                        )
                      })}
                    </div>
                  </div>
                </InfoWindow>
              ) : null}

              {/**Info Window using user input */}
              {selected ? (
                <InfoWindow
                  position={{ lat: selected.lat, lng: selected.lng }}
                  onCloseClick={() => setSelected(null)}
                >
                  <div>
                    <h3>{selected.address}</h3>
                    <h4>User: {selected.user}</h4>
                    <p>{selected.description}</p>

                    <p>On: {formatRelative(selected.time, new Date())}</p>
                  </div>
                </InfoWindow>
              ) : null}
            </GoogleMap>
          </div>
        )
      }}
    </FirebaseAuthConsumer>
  )
}

export default App
